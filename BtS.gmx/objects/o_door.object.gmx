<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>door</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>o_blockparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>doortype=0
col = make_color_rgb(255,255,51);

if doortype=1
{
col = make_color_rgb(255,255,51);
}
if doortype=2
{
col = make_color_rgb(0, 191, 255);
}
if doortype=3
{
col = make_color_rgb(255, 0, 0);
}
if doortype=4
{
col = make_color_rgb(255, 0, 255);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if doortype=0
{
if global.brokenlock=false
{
if !instance_exists(parmonster)
{
a=instance_create(x,y,o_opendoor)
a.image_angle=image_angle
instance_destroy()
}
}
else
{
a=instance_create(x,y,o_opendoor)
a.image_angle=image_angle
instance_destroy()
}
}

var lock1; var lock2; var lock3; var lock4;
with(o_lightlock){ 
if(locktype=1){lock1 = id;}if(locktype=2){lock2 = id;}if(locktype=3){lock3 = id;}if(locktype=4){lock4 = id;}
}
if doortype=1
{
if (instance_exists(lock1) and lock1.unlocked=true)
{a=instance_create(x,y,o_opendoor) a.image_angle=image_angle a.doortype=doortype instance_destroy()}
col = make_color_rgb(255,255,51);
}
if doortype=2
{
if (instance_exists(lock2) and lock2.unlocked=true)
{a=instance_create(x,y,o_opendoor) a.image_angle=image_angle a.doortype=doortype instance_destroy()}
col = make_color_rgb(0, 191, 255);
}
if doortype=3
{
if (instance_exists(lock3) and lock3.unlocked=true)
{a=instance_create(x,y,o_opendoor) a.image_angle=image_angle a.doortype=doortype instance_destroy()}
col = make_color_rgb(255, 0, 0);
}
if doortype=4
{
if (instance_exists(lock4) and lock4.unlocked=true)
{a=instance_create(x,y,o_opendoor) a.image_angle=image_angle a.doortype=doortype instance_destroy()}
col = make_color_rgb(255, 0, 255);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(door,1,x,y,1,1,image_angle,c_white,1);
draw_sprite_ext(door,0,x,y,1,1,image_angle,c_white,1);
if doortype=0
{
if image_angle=0 {draw_sprite_ext(gear,0,x-13,y-13,1,1,0,c_white,1);}
if image_angle=90 {draw_sprite_ext(gear,0,x-13,y+13,1,1,0,c_white,1);}
if image_angle=180 {draw_sprite_ext(gear,0,x+13,y+13,1,1,0,c_white,1);}
if image_angle=270 {draw_sprite_ext(gear,0,x+13,y-13,1,1,0,c_white,1);}
}

if doortype&gt;0
{
if image_angle=0 {draw_sprite_ext(lightballsprite,0,x-15,y-15,0.3,0.3,image_angle,col,0.2) draw_sprite_ext(lightballsprite,0,x-15,y-15,0.6,0.6,image_angle,col,0.5) draw_sprite_ext(doorgem,0,x-15,y-15,1,1,0,col,1); }
if image_angle=90 {draw_sprite_ext(lightballsprite,0,x-15,y+15,0.3,0.3,image_angle,col,0.2) draw_sprite_ext(lightballsprite,0,x-15,y+15,0.6,0.6,image_angle,col,0.5) draw_sprite_ext(doorgem,0,x-15,y+15,1,1,0,col,1); }
if image_angle=180 {draw_sprite_ext(lightballsprite,0,x+15,y+15,0.3,0.3,image_angle,col,0.2) draw_sprite_ext(lightballsprite,0,x+15,y+15,0.6,0.6,image_angle,col,0.5) draw_sprite_ext(doorgem,0,x+15,y+15,1,1,0,col,1); }
if image_angle=270 {draw_sprite_ext(lightballsprite,0,x+15,y-15,0.3,0.3,image_angle,col,0.2) draw_sprite_ext(lightballsprite,0,x+15,y-15,0.6,0.6,image_angle,col,0.5) draw_sprite_ext(doorgem,0,x+15,y-15,1,1,0,col,1); }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
