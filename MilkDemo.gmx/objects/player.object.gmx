<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving=0
image_speed=0.5
movespeed=15
movestep=0
global.facing="D"
step=choose(0,1)
blinkchanse=choose(0,1,2)
attacktimer=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var fholdd, fholdu, fholdl, fholdr, cc;

holdd=keyboard_check(ord('S'))
holdu=keyboard_check(ord('W'))
holdl=keyboard_check(ord('A'))
holdr=keyboard_check(ord('D'))

if holdu &amp;&amp; holdd {
    holdu=0
    holdd=0
}
if holdl &amp;&amp; holdr {
    holdl=0
    holdr=0
}

if attacktimer=0
{
if ((holdd || holdu || holdl || holdr) &amp;&amp; !instance_exists(sys_transition))
        {
    if (!moving) {
        if (holdl) { sprite_index=s_run; image_xscale=-1 global.facing="L" }
        else if (holdr) { sprite_index=s_run; image_xscale=1 global.facing="R" }
        else if (holdu) { sprite_index=s_run; global.facing="R" }
        else if (holdd) { sprite_index=s_run; global.facing="R" }
    }
    moving=1
    if (holdl) { sprite_index=s_run; image_xscale=-1 global.facing="L" }
    else if (holdr) { sprite_index=s_run; image_xscale=1 global.facing="R" }
    //if (holdl &amp;&amp; !holdd &amp;&amp; !holdu) { sprite_index=s_run_left; global.facing="L" }
    //else if (holdr &amp;&amp; !holdd &amp;&amp; !holdu) { sprite_index=s_run_right; global.facing="R" }
    //if (holdd &amp;&amp; holdl &amp;&amp; sprite_index!=s_run_face &amp;&amp; sprite_index!=s_run_left) { sprite_index=s_run_left; global.facing="L" }
    //else if (holdd &amp;&amp; holdr &amp;&amp; sprite_index!=s_run_face &amp;&amp; sprite_index!=s_run_right) { sprite_index=s_run_right; global.facing="R" }
    //else if (holdu &amp;&amp; holdl &amp;&amp; sprite_index!=s_run_back &amp;&amp; sprite_index!=s_run_left) { sprite_index=s_run_left; global.facing="L" }
    //else if (holdu &amp;&amp; holdr &amp;&amp; sprite_index!=s_run_back &amp;&amp; sprite_index!=s_run_right) { sprite_index=s_run_right; global.facing="R" }
} else { moving=0 }


if (moving) {
    if ((holdd || holdu) &amp;&amp; (holdl || holdr)) { movestep+=(movespeed/sqrt(2)) }
    else { movestep+=movespeed }

    while (movestep&gt;=1) {
        movestep-=1
        fholdd=0; fholdu=0; fholdl=0; fholdr=0;
        for (cc=12; cc&gt;0; cc-=1) {
        if holdu {
            if !place_free(x,y-1) {
                if place_free(x-cc,y-1) &amp;&amp; !(holdr || fholdr) { fholdl=1 }
                else if place_free(x+cc,y-1) &amp;&amp; !(holdl || fholdl) { fholdr=1 }
            }
        } else if holdd {
            if !place_free(x,y+1) {
                if place_free(x-cc,y+1) &amp;&amp; !(holdr || fholdr) { fholdl=1 }
                else if place_free(x+cc,y+1) &amp;&amp; !(holdl || fholdl) { fholdr=1 }
            }
        }
        if holdl {
            if !place_free(x-1,y) {
                if place_free(x-1,y-cc) &amp;&amp; !(holdd || fholdd) { fholdu=1 }
                else if place_free(x-1,y+cc) &amp;&amp; !(holdu || fholdu) { fholdd=1 }
            }
        } else if holdr {
            if !place_free(x+1,y) {
                if place_free(x+1,y-cc) &amp;&amp; !(holdd || fholdd) { fholdu=1 }
                else if place_free(x+1,y+cc) &amp;&amp; !(holdu || fholdu) { fholdd=1 }
            }
        }
        }
        xstep=(holdr || fholdr)-(holdl || fholdl)
        ystep=(holdd || fholdd)-(holdu || fholdu)
        if (place_free(x+xstep,y)) { x+=xstep }
        if (place_free(x,y+ystep)) { y+=ystep }
    }
} else {
    switch (sprite_index) {
        case s_run: sprite_index=s_idle; break;
        case s_attack1: sprite_index=s_idle; break;
    }
    movestep=0
}

}
switch(sprite_index)
{
case s_run: image_speed=0.5; break;
case s_idle: image_speed=0.5; break;
case s_attack1: image_speed=0.5; break;
}

movespeed=15

if sprite_index=s_run
    {
    if image_index=1 or image_index=7
    {
     if step=0 {audio_play_sound(sand2,0.2,false)}
     if step=1 {audio_play_sound(sand2,0.2,false)}
     step=choose(0,1)
    }
}

if sprite_index=s_idle &amp;&amp; image_index&gt;21
{
blinkchanse=choose(0,1,2)
if blinkchanse=2
{
sprite_index=s_idle2
image_index=0
}
}
if sprite_index=s_idle2 &amp;&amp; image_index&gt;21
{
blinkchanse=choose(0,1,2)
sprite_index=s_idle
image_index=0
}


if (keyboard_check_pressed(ord('K')) &amp;&amp; attacktimer=0)
{
image_index=0
attacktimer=18
}

if attacktimer&gt;0
{
if attacktimer=13 {audio_play_sound(swing1,0.2,false)}
sprite_index=s_attack1
attacktimer--
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=-y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x+2,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha*0.5)
draw_sprite_ext(sprite_index,image_index,x,y+2,image_xscale,image_yscale,image_angle,image_blend,image_alpha*0.5)
draw_sprite_ext(sprite_index,image_index,x-2,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha*0.5)
draw_sprite_ext(sprite_index,image_index,x,y-2,image_xscale,image_yscale,image_angle,image_blend,image_alpha*0.5)
draw_sprite_ext(sprite_index,image_index,x+1,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
draw_sprite_ext(sprite_index,image_index,x,y+1,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
draw_sprite_ext(sprite_index,image_index,x-1,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
draw_sprite_ext(sprite_index,image_index,x,y-1,image_xscale,image_yscale,image_angle,image_blend,image_alpha)

draw_self()

//draw_text(self.x,self.y-50,blinkchanse)
//draw_text(self.x,self.y-100,attacktimer)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
