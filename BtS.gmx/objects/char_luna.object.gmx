<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>luna_stay</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>player</parentName>
  <maskName>player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bessmertie</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Variables
dir = 1;               // Player direction. 1 = right, -1 = left.
xspeed = 0.0;          // Horizontal speed.
yspeed = 0.0;          // Vertical speed.
xmaxspeed = global.movespeed;       // Horizontal speed limit.
ymaxspeed = 40.0;      // Vertical speed limit.

weight = global.playergravity;          // How fast the player falls.
accel = 2.5;           // How fast the player accelerates horizontally.
xfriction = 2.5;       // How fast the player decelerates horizontally.
jumpHeight = global.jumpheight;      // How high the player jumps.

maxDoubleJumps = 0;    // Number of possible additional jumps. 
availableJumps = 0;    // Number of available additional jumps.
canDoubleJump = false; // Whether or not player can do an additional jump.
canWalljump = true;    // Whether or not player can walljump.

isClimbing = false;    // Whether or not player is climbing.
isJumping = false;     // Whether or not player is jumping.
isDismounting = false; // Whether or not player is dismounting a ladder.
isWallsliding = false; // Whether or not player is sliding down a wall.

aiming_max = 60;       // Max number of aiming frames.
dismount_max = 20;     // Max number of ladder dismounting frames.
landing_max = 2;      // Max number of landing frames.

aiming = 0;            // Remaining number of aiming frames.
dismount = 0;          // Remaining number of ladder dismounting frames.
landing = 0;           // Remaining number of landing frames.
firing = 0;            // Remaining number of firing frames.

flashlight=0;
t = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eyetimer=0
double_jump=1
shuffletimer=0
if instance_exists(player) and !instance_exists(chararm)
{
instance_create(x+0,y+0,chararm)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw memes
ycor[0, 0] = -1; xcor[0, 0] = 0;
ycor[0, 1] = 0; xcor[0, 1] = 0;
ycor[0, 2] = +1; xcor[0, 2] = 0;
ycor[0, 3] = 0; xcor[0, 3] = 0;

ycor[1, 0] = -1; xcor[1, 0] = 0;
ycor[1, 1] = 0; xcor[1, 1] = 0;
ycor[1, 2] = +1; xcor[1, 2] = 0;
ycor[1, 3] = 0; xcor[1, 3] = 0;

ycor[2, 0] = +4; xcor[2, 0] = +4;
ycor[2, 1] = +5; xcor[2, 1] = +4;
ycor[2, 2] = +6; xcor[2, 2] = +4;
ycor[2, 3] = +5; xcor[2, 3] = +4;
ycor[2, 4] = +4; xcor[2, 4] = +4;
ycor[2, 5] = +3; xcor[2, 5] = +4;
ycor[2, 6] = +2; xcor[2, 6] = +4;
ycor[2, 7] = +3; xcor[2, 7] = +4;
ycor[2, 8] = +4; xcor[2, 8] = +4;
ycor[2, 9] = +5; xcor[2, 9] = +4;
ycor[2, 10] = +6; xcor[2, 10] = +4;
ycor[2, 11] = +5; xcor[2, 11] = +4;
ycor[2, 12] = +4; xcor[2, 12] = +4;
ycor[2, 13] = +3; xcor[2, 13] = +4;
ycor[2, 14] = +2; xcor[2, 14] = +4;
ycor[2, 15] = +3; xcor[2, 15] = +4;

ycor[3, 0] = +4; xcor[3, 0] = +4;
ycor[3, 1] = +5; xcor[3, 1] = +4;
ycor[3, 2] = +6; xcor[3, 2] = +4;
ycor[3, 3] = +5; xcor[3, 3] = +4;
ycor[3, 4] = +4; xcor[3, 4] = +4;
ycor[3, 5] = +3; xcor[3, 5] = +4;
ycor[3, 6] = +2; xcor[3, 6] = +4;
ycor[3, 7] = +3; xcor[3, 7] = +4;
ycor[3, 8] = +4; xcor[3, 8] = +4;
ycor[3, 9] = +5; xcor[3, 9] = +4;
ycor[3, 10] = +6; xcor[3, 10] = +4;
ycor[3, 11] = +5; xcor[3, 11] = +4;
ycor[3, 12] = +4; xcor[3, 12] = +4;
ycor[3, 13] = +3; xcor[3, 13] = +4;
ycor[3, 14] = +2; xcor[3, 14] = +4;
ycor[3, 15] = +3; xcor[3, 15] = +4;

ycor[4, 0] = -18; xcor[4, 0] = +4;
ycor[4, 1] = -13; xcor[4, 1] = +4;
ycor[4, 2] = -12; xcor[4, 2] = +4;

ycor[5, 0] = -18; xcor[5, 0] = +4;
ycor[5, 1] = -13; xcor[5, 1] = +4;
ycor[5, 2] = -12; xcor[5, 2] = +4;

ycor[6, 0] = -1; xcor[6, 0] = 0;
ycor[6, 1] = 0; xcor[6, 1] = 0;
ycor[6, 2] = +1; xcor[6, 2] = 0;
ycor[6, 3] = 0; xcor[6, 3] = 0;

ycor[7, 0] = -1; xcor[7, 0] = 0;
ycor[7, 1] = 0; xcor[7, 1] = 0;
ycor[7, 2] = +1; xcor[7, 2] = 0;
ycor[7, 3] = 0; xcor[7, 3] = 0;

ycor[8, 0] = +4; xcor[8, 0] = -4;
ycor[8, 1] = +5; xcor[8, 1] = -4;
ycor[8, 2] = +6; xcor[8, 2] = -4;
ycor[8, 3] = +5; xcor[8, 3] = -4;
ycor[8, 4] = +4; xcor[8, 4] = -4;
ycor[8, 5] = +3; xcor[8, 5] = -4;
ycor[8, 6] = +2; xcor[8, 6] = -4;
ycor[8, 7] = +3; xcor[8, 7] = -4;
ycor[8, 8] = +4; xcor[8, 8] = -4;
ycor[8, 9] = +5; xcor[8, 9] = -4;
ycor[8, 10] = +6; xcor[8, 10] = -4;
ycor[8, 11] = +5; xcor[8, 11] = -4;
ycor[8, 12] = +4; xcor[8, 12] = -4;
ycor[8, 13] = +3; xcor[8, 13] = -4;
ycor[8, 14] = +2; xcor[8, 14] = -4;
ycor[8, 15] = +3; xcor[8, 15] = -4;

ycor[9, 0] = +4; xcor[9, 0] = -4;
ycor[9, 1] = +5; xcor[9, 1] = -4;
ycor[9, 2] = +6; xcor[9, 2] = -4;
ycor[9, 3] = +5; xcor[9, 3] = -4;
ycor[9, 4] = +4; xcor[9, 4] = -4;
ycor[9, 5] = +3; xcor[9, 5] = -4;
ycor[9, 6] = +2; xcor[9, 6] = -4;
ycor[9, 7] = +3; xcor[9, 7] = -4;
ycor[9, 8] = +4; xcor[9, 8] = -4;
ycor[9, 9] = +5; xcor[9, 9] = -4;
ycor[9, 10] = +6; xcor[9, 10] = -4;
ycor[9, 11] = +5; xcor[9, 11] = -4;
ycor[9, 12] = +4; xcor[9, 12] = -4;
ycor[9, 13] = +3; xcor[9, 13] = -4;
ycor[9, 14] = +2; xcor[9, 14] = -4;
ycor[9, 15] = +3; xcor[9, 15] = -4;

ycor[10, 0] = -18; xcor[10, 0] = -4;
ycor[10, 1] = -13; xcor[10, 1] = -4;
ycor[10, 2] = -12; xcor[10, 2] = -4;

ycor[11, 0] = -18; xcor[11, 0] = -4;
ycor[11, 1] = -13; xcor[11, 1] = -4;
ycor[11, 2] = -12; xcor[11, 2] = -4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invincibility Over
bessmertie=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>flashlight</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image Handling

// Draw the appropriate sprites:
if ((place_meeting(x, y+1, o_blockparent))) {
  if (xspeed == 0) {
    // Idle.
    sprite_index = luna_stay;

  }
  else {
    // Running.
    if (sign(xspeed) == sign(dir)) {
      sprite_index = luna_run;
    }
    // Skidding.
    else {
      sprite_index = luna_stay;
    }
  }
}
else {
  // Jumping.
  sprite_index = luna_jump;
  image_index = 1 + sign(yspeed);
  if (abs(yspeed) &lt; 2) {
    image_index = 1;
  }
}
// Landing.
if (landing &gt; 0) {
  landing -= 1;
  sprite_index = luna_stay;
}

// Configure image speeds.
image_speed = 0.5;

if (sprite_index == luna_run) {
  image_speed = 0.4;
}

if (sprite_index == luna_stay) {
  image_speed = 0.05;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image Handling

// Draw the appropriate sprites:
if ((place_meeting(x, y+1, o_blockparent))) {
  if (xspeed == 0) {
    // Idle.
    sprite_index = luna_stay_a;
  }
  else {
    // Running.
    if (sign(xspeed) == sign(dir)) {
      sprite_index = luna_run_a;
    }
    // Skidding.
    else {
      sprite_index = luna_stay_a;

    }
  }
}
else {
  // Jumping.
  sprite_index = luna_jump_a;
  image_index = 1 + sign(yspeed);
  if (abs(yspeed) &lt; 2) {
    image_index = 1;
  }
}
// Landing.
if (landing &gt; 0) {
  landing -= 1;
  sprite_index = luna_stay_a;

}

// Configure image speeds.
image_speed = 0.5;

if (sprite_index == luna_run_a) {
  image_speed = 0.4;
}

if (sprite_index == luna_stay_a) {
  image_speed = 0.05;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Head
if image_xscale&gt;0
{
ycor[0, 0] = -1; xcor[0, 0] = 0;
ycor[0, 1] = 0; xcor[0, 1] = 0;
ycor[0, 2] = +1; xcor[0, 2] = 0;
ycor[0, 3] = 0; xcor[0, 3] = 0;

ycor[1, 0] = -1; xcor[1, 0] = 0;
ycor[1, 1] = 0; xcor[1, 1] = 0;
ycor[1, 2] = +1; xcor[1, 2] = 0;
ycor[1, 3] = 0; xcor[1, 3] = 0;

ycor[2, 0] = +3; xcor[2, 0] = +4;
ycor[2, 1] = +3; xcor[2, 1] = +4;
ycor[2, 2] = +3; xcor[2, 2] = +4;
ycor[2, 3] = +2; xcor[2, 3] = +4;
ycor[2, 4] = +1; xcor[2, 4] = +4;
ycor[2, 5] = 0; xcor[2, 5] = +4;
ycor[2, 6] = +1; xcor[2, 6] = +4;
ycor[2, 7] = +2; xcor[2, 7] = +4;
ycor[2, 8] = +3; xcor[2, 8] = +4;
ycor[2, 9] = +3; xcor[2, 9] = +4;
ycor[2, 10] = +3; xcor[2, 10] = +4;
ycor[2, 11] = +2; xcor[2, 11] = +4;
ycor[2, 12] = +1; xcor[2, 12] = +4;
ycor[2, 13] = 0; xcor[2, 13] = +4;
ycor[2, 14] = +1; xcor[2, 14] = +4;
ycor[2, 15] = +2; xcor[2, 15] = +4;

ycor[3, 0] = +3; xcor[3, 0] = +4;
ycor[3, 1] = +3; xcor[3, 1] = +4;
ycor[3, 2] = +3; xcor[3, 2] = +4;
ycor[3, 3] = +2; xcor[3, 3] = +4;
ycor[3, 4] = +1; xcor[3, 4] = +4;
ycor[3, 5] = 0; xcor[3, 5] = +4;
ycor[3, 6] = +1; xcor[3, 6] = +4;
ycor[3, 7] = +2; xcor[3, 7] = +4;
ycor[3, 8] = +3; xcor[3, 8] = +4;
ycor[3, 9] = +3; xcor[3, 9] = +4;
ycor[3, 10] = +3; xcor[3, 10] = +4;
ycor[3, 11] = +2; xcor[3, 11] = +4;
ycor[3, 12] = +1; xcor[3, 12] = +4;
ycor[3, 13] = 0; xcor[3, 13] = +4;
ycor[3, 14] = +1; xcor[3, 14] = +4;
ycor[3, 15] = +2; xcor[3, 15] = +4;

ycor[4, 0] = -7; xcor[4, 0] = +0;
ycor[4, 1] = -5; xcor[4, 1] = +0;
ycor[4, 2] = -3; xcor[4, 2] = +0;

ycor[5, 0] = -7; xcor[5, 0] = +0;
ycor[5, 1] = -5; xcor[5, 1] = +0;
ycor[5, 2] = -3; xcor[5, 2] = +0;
}


if image_xscale&lt;0
{
ycor[0, 0] = -1; xcor[0, 0] = 0;
ycor[0, 1] = 0; xcor[0, 1] = 0;
ycor[0, 2] = +1; xcor[0, 2] = 0;
ycor[0, 3] = 0; xcor[0, 3] = 0;

ycor[1, 0] = -1; xcor[1, 0] = 0;
ycor[1, 1] = 0; xcor[1, 1] = 0;
ycor[1, 2] = +1; xcor[1, 2] = 0;
ycor[1, 3] = 0; xcor[1, 3] = 0;

ycor[2, 0] = +3; xcor[2, 0] = -4;
ycor[2, 1] = +3; xcor[2, 1] = -4;
ycor[2, 2] = +3; xcor[2, 2] = -4;
ycor[2, 3] = +2; xcor[2, 3] = -4;
ycor[2, 4] = +1; xcor[2, 4] = -4;
ycor[2, 5] = 0; xcor[2, 5] = -4;
ycor[2, 6] = +1; xcor[2, 6] = -4;
ycor[2, 7] = +2; xcor[2, 7] = -4;
ycor[2, 8] = +3; xcor[2, 8] = -4;
ycor[2, 9] = +3; xcor[2, 9] = -4;
ycor[2, 10] = +3; xcor[2, 10] = -4;
ycor[2, 11] = +2; xcor[2, 11] = -4;
ycor[2, 12] = +1; xcor[2, 12] = -4;
ycor[2, 13] = 0; xcor[2, 13] = -4;
ycor[2, 14] = +1; xcor[2, 14] = -4;
ycor[2, 15] = +2; xcor[2, 15] = -4;

ycor[3, 0] = +3; xcor[3, 0] = -4;
ycor[3, 1] = +3; xcor[3, 1] = -4;
ycor[3, 2] = +3; xcor[3, 2] = -4;
ycor[3, 3] = +2; xcor[3, 3] = -4;
ycor[3, 4] = +1; xcor[3, 4] = -4;
ycor[3, 5] = 0; xcor[3, 5] = -4;
ycor[3, 6] = +1; xcor[3, 6] = -4;
ycor[3, 7] = +2; xcor[3, 7] = -4;
ycor[3, 8] = +3; xcor[3, 8] = -4;
ycor[3, 9] = +3; xcor[3, 9] = -4;
ycor[3, 10] = +3; xcor[3, 10] = -4;
ycor[3, 11] = +2; xcor[3, 11] = -4;
ycor[3, 12] = +1; xcor[3, 12] = -4;
ycor[3, 13] = 0; xcor[3, 13] = -4;
ycor[3, 14] = +1; xcor[3, 14] = -4;
ycor[3, 15] = +2; xcor[3, 15] = -4;

ycor[4, 0] = -7; xcor[4, 0] = +0;
ycor[4, 1] = -5; xcor[4, 1] = +0;
ycor[4, 2] = -3; xcor[4, 2] = +0;

ycor[5, 0] = -7; xcor[5, 0] = +0;
ycor[5, 1] = -5; xcor[5, 1] = +0;
ycor[5, 2] = -3; xcor[5, 2] = +0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Logic
image_alpha=1



// VELOCITY HANDLING ==================================================

// Clamp velocities.
xspeed = iff(abs(xspeed) &gt; xmaxspeed, xmaxspeed * sign(xspeed), xspeed);
yspeed = iff(abs(yspeed) &gt; ymaxspeed, ymaxspeed * sign(yspeed), yspeed);

if (place_free(x, y + yspeed)) {
  y += yspeed;
}
else {
  // Landing.
  if (yspeed &gt; 0) {
    isClimbing = false;
    isJumping = false;
    double_jump=1;
    isDismounting = false;
    landing = landing_max;
    dismount = dismount_max;
    y = floor(y);
  }
  move_contact_solid(point_direction(x, y, x, y + yspeed), yspeed);
  yspeed = 0;
}

// Horizontal velocity:
if (place_free(x + xspeed, y)) {
    x += xspeed;
} 
else {
  move_contact_solid(point_direction(x, y, x + xspeed, y), xspeed);
  xspeed = 0;
}

// PLAYER MOVEMENT ==================================================

isWallsliding = false;

if (isClimbing == false) {
  // Handle directions.
  if (keyboard_check_pressed(ord('A')) || (keyboard_check(ord('A')) &amp;&amp; keyboard_check_released(ord('D')))) {
    dir = -1;
  }
  if (keyboard_check_pressed(ord('D')) || (keyboard_check(ord('D')) &amp;&amp; keyboard_check_released(ord('A')))) {
    dir = 1; 
  }
  
  // Jumping from air:
  if (place_free(x, y + 1)) {
    yspeed += weight;

    // Jump cancel.
    if ((!keyboard_check(vk_space)) &amp;&amp; isJumping &amp;&amp; (yspeed &lt; -jumpHeight / 2)) {
      yspeed = -jumpHeight / 3;
    }
  }

  
  // Jumping from ground.
  else {
    availableJumps = maxDoubleJumps;
    canDoubleJump = false;
    if (keyboard_check_pressed(vk_space)) {
      yspeed = -jumpHeight;
      xspeed = xmaxspeed * (0 - keyboard_check(ord('A')) + keyboard_check(ord('D')));
      isJumping = true;
    }
  }

  // Horizontal acceleration.
  if (keyboard_check(ord('A')) &amp;&amp; xspeed &gt; -xmaxspeed &amp;&amp; dir == -1) {
    xspeed -= accel;
  }
  if (keyboard_check(ord('D')) &amp;&amp; xspeed &lt; xmaxspeed &amp;&amp; dir == 1) {
    xspeed += accel;
  }
  
  // Horizontal friction.
  if (!keyboard_check(ord('A')) &amp;&amp; !keyboard_check(ord('D'))) {
    if (abs(xspeed) &gt; xfriction) {
      xspeed -= sign(xspeed) * xfriction;
    } else {
      xspeed = 0;
    }
  }

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invincibility Frames

if bessmertie=1
{


if t &lt; 80
{

if (t&lt;=8 || t&gt;16 &amp;&amp; t&lt;=24 || t&gt;32 &amp;&amp; t&lt;=40 || t&gt;48 &amp;&amp; t&lt;=56 || t&gt;64 &amp;&amp; t&lt;=72 || t&gt;80 &amp;&amp; t&lt;=88|| t&gt;96 &amp;&amp; t&lt;=104 || t&gt;112 &amp;&amp; t&lt;=120 || t&gt;128 )
{image_alpha=0.5}
if (t&gt;8 &amp;&amp; t&lt;=16 || t&gt;24 &amp;&amp; t&lt;=32 || t&gt;40 &amp;&amp; t&lt;=48 || t&gt;56 &amp;&amp; t&lt;=64 || t&gt;72 &amp;&amp; t&lt;=80 || t&gt;88 &amp;&amp; t&lt;=96 || t&gt;104 &amp;&amp; t&lt;=112 || t&gt;120 &amp;&amp; t&lt;=128 )
{image_alpha=1}
t+=1; //counts down to when the guy stops flashing, ignoring the clumsy "alarm" feature
}
}

if bessmertie=0
{
image_alpha = 1; t=0;
}

if (flashlight=1)
{
if mouse_x&gt;x{image_xscale=1}
if mouse_x&lt;x{image_xscale=-1}
}
if (flashlight=0)
{
if dir=1{image_xscale=1}
if dir=-1{image_xscale=-1}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Loader
if shuffletimer&lt;5
{
globalvar myRooms;
myRooms = ds_list_create();
ds_list_add(myRooms,l1_2);
ds_list_add(myRooms,l1_3);
ds_list_shuffle(myRooms);
}
else
{shuffletimer=5}
shuffletimer+=1

if (x&gt;room_width)
{
{
if !ds_list_empty(myRooms)
{
global.passedrooms+=1;
room_goto(ds_list_find_value(myRooms,0));
ds_list_delete(myRooms,0);
}
else
{
    show_message("No rooms left");
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="bubble">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bubble Jump
if other.jump=0
{
yspeed =-30;
xspeed = xmaxspeed * (0 - keyboard_check(ord('A')) + keyboard_check(ord('D')));
other.jump=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_off;
switch( sprite_index ) {
    case( luna_stay ): i_off = 0; break;
    case( luna_stay_a ): i_off = 1; break;
    case( luna_run ): i_off = 2; break;
    case( luna_run_a ): i_off = 3; break;
    case( luna_jump ): i_off = 4; break;
    case( luna_jump_a ): i_off = 5; break;
}

var ii = floor( image_index );
draw_self();
eyetimer+=1
if eyetimer&lt;150 {draw_sprite_ext(luna_eyes,0,player.x + xcor[i_off, ii], player.y + ycor[i_off, ii],image_xscale,image_yscale,0,c_white,1)}
if (eyetimer=150 or eyetimer=151) {draw_sprite_ext(luna_eyes,1,player.x + xcor[i_off, ii], player.y + ycor[i_off, ii],image_xscale,image_yscale,0,c_white,1)}
if (eyetimer=152 or eyetimer=153) {draw_sprite_ext(luna_eyes,2,player.x + xcor[i_off, ii], player.y + ycor[i_off, ii],image_xscale,image_yscale,0,c_white,1)}
if (eyetimer=154 or eyetimer=155) {draw_sprite_ext(luna_eyes,3,player.x + xcor[i_off, ii], player.y + ycor[i_off, ii],image_xscale,image_yscale,0,c_white,1)}
if (eyetimer=156 or eyetimer=157) {draw_sprite_ext(luna_eyes,4,player.x + xcor[i_off, ii], player.y + ycor[i_off, ii],image_xscale,image_yscale,0,c_white,1)}
if eyetimer&gt;=158 {eyetimer=choose(0,50,-100,-150)}
draw_sprite_ext(luna_hat,0,player.x + xcor[i_off, ii], player.y + ycor[i_off, ii],image_xscale,image_yscale,0,c_white,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if( place_free(x,y+1) &amp;&amp; double_jump = 1 )
{ 
double_jump=0;
yspeed = -jumpHeight;
xspeed = xmaxspeed * (0 - keyboard_check(ord('A')) + keyboard_check(ord('D')));
repeat(20)
{
a=instance_create(x,y+35,particle)
a.type=1;
a.image_xscale=choose(0.1,0.2,0.3)
a.image_yscale=a.image_xscale
a.speed=4+random(4)
a.direction=100+random(260)
a.image_alpha=choose(0.7,0.85,1)
a.image_index=1
}
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
