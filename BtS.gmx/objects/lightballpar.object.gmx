<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ifdestroyspawnexplo=true 
{
a=instance_create(x,y,lightballexplo_impact)
if col = make_color_rgb(255,255,51) {a.pmode=1}
if col = make_color_rgb(0,191,255) {a.pmode=2}
if col = make_color_rgb(255, 0, 0) {a.pmode=3}
if col = make_color_rgb(199, 21, 133) {a.pmode=4}
}
else
{
part_emitter_region(particles.Starter_Depth0,particles.Emitter8,x,x,y,y,ps_shape_ellipse,1)
part_emitter_burst(particles.Starter_Depth0,particles.Emitter8,partdest,3)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_towards_point(mouse_x+(spread-random(spread*2))*global.lightspread,mouse_y+(spread-random(spread*2))*global.lightspread,global.bulletspeed)

if particlemode=0
{
part_emitter_region(particles.Starter_Depth1,particles.Emitter13,x,x,y,y,ps_shape_ellipse,1)
part_emitter_burst(particles.Starter_Depth1,particles.Emitter13,particles.Particle13,3)
part_type_direction(particles.Particle13,direction-26,direction+26,0,0);
}
if particlemode=1
{
part_emitter_region(particles.Starter_Depth1,particles.Emitter21,x,x,y,y,ps_shape_ellipse,1)
part_emitter_burst(particles.Starter_Depth1,particles.Emitter21,particles.Particle21,3)
part_type_direction(particles.Particle21,direction-26,direction+26,0,0);
}
if particlemode=2
{
part_emitter_region(particles.Starter_Depth1,particles.Emitter23,x,x,y,y,ps_shape_ellipse,1)
part_emitter_burst(particles.Starter_Depth1,particles.Emitter23,particles.Particle23,3)
part_type_direction(particles.Particle23,direction-26,direction+26,0,0);
}
if global.mirror=true {bounce=2}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale=xsize; image_yscale=ysize;
if self.y&gt;room_height
{instance_destroy()}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.mirror=false
{
instance_destroy()
}
if (global.mirror=true)
{
if bounce&gt;0
{
move_bounce_solid(true)
bounce-=1
}
if bounce=0
{
instance_destroy()
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//dist=point_distance(x,y,xprevious,yprevious)
//dire=point_direction(x,y,xprevious,yprevious)
//for(i=0;i&lt;dist;i+=1){
//            draw_sprite_ext(sprite_index,-1,x+lengthdir_x(i,dire),y+lengthdir_y(i,dire),image_xscale,image_yscale,image_angle,image_blend,0.05)
//}           
//draw_sprite_ext(sprite_index,-1,x,y,image_xscale,image_yscale,image_angle,image_blend,0.5+(0.5-dist/10))


draw_sprite_ext(sprite_index,-1,x,y,image_xscale,image_yscale,image_angle,col,1)
draw_sprite_ext(sprite_index,-1,x,y,image_xscale*0.5,image_yscale*0.5,image_angle,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
