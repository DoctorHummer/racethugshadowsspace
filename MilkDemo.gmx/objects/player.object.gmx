<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_stand_face</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving=0
image_speed=0.5
movespeed=6
movestep=0
global.facing="D"
action=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var fholdd, fholdu, fholdl, fholdr, cc;

holdd=keyboard_check(ord('S'))
holdu=keyboard_check(ord('W'))
holdl=keyboard_check(ord('A'))
holdr=keyboard_check(ord('D'))

if holdu &amp;&amp; holdd {
    holdu=0
    holdd=0
}
if holdl &amp;&amp; holdr {
    holdl=0
    holdr=0
}

if (holdd ||holdu || holdl || holdr)
        {
    if (!moving) {
        if action=false
        {
        if (holdd) { sprite_index=s_walk_face; global.facing="D" }
        else if (holdu) { sprite_index=s_walk_back; global.facing="U" }
        if (holdl) { sprite_index=s_walk_left; global.facing="L" }
        else if (holdr) { sprite_index=s_walk_right; global.facing="R" }
        }
        else
        {
        if (holdd) { sprite_index=s_run_face; global.facing="D" }
        else if (holdu) { sprite_index=s_run_back; global.facing="U" }
        if (holdl) { sprite_index=s_run_left; global.facing="L" }
        else if (holdr) { sprite_index=s_run_right; global.facing="R" }
        }
    }
    moving=1
    if action=false
    {
    if (holdd &amp;&amp; !holdl &amp;&amp; !holdr) { sprite_index=s_walk_face; global.facing="D" }
    else if (holdu &amp;&amp; !holdl &amp;&amp; !holdr) { sprite_index=s_walk_back; global.facing="U" }
    else if (holdl &amp;&amp; !holdd &amp;&amp; !holdu) { sprite_index=s_walk_left; global.facing="L" }
    else if (holdr &amp;&amp; !holdd &amp;&amp; !holdu) { sprite_index=s_walk_right; global.facing="R" }
    if (holdd &amp;&amp; holdl &amp;&amp; sprite_index!=s_walk_face &amp;&amp; sprite_index!=s_walk_left) { sprite_index=s_walk_left; global.facing="L" }
    else if (holdd &amp;&amp; holdr &amp;&amp; sprite_index!=s_walk_face &amp;&amp; sprite_index!=s_walk_right) { sprite_index=s_walk_right; global.facing="R" }
    else if (holdu &amp;&amp; holdl &amp;&amp; sprite_index!=s_walk_back &amp;&amp; sprite_index!=s_walk_left) { sprite_index=s_walk_left; global.facing="L" }
    else if (holdu &amp;&amp; holdr &amp;&amp; sprite_index!=s_walk_back &amp;&amp; sprite_index!=s_walk_right) { sprite_index=s_walk_right; global.facing="R" }
    }
    else
    {
    if (holdd &amp;&amp; !holdl &amp;&amp; !holdr) { sprite_index=s_run_face; global.facing="D" }
    else if (holdu &amp;&amp; !holdl &amp;&amp; !holdr) { sprite_index=s_run_back; global.facing="U" }
    else if (holdl &amp;&amp; !holdd &amp;&amp; !holdu) { sprite_index=s_run_left; global.facing="L" }
    else if (holdr &amp;&amp; !holdd &amp;&amp; !holdu) { sprite_index=s_run_right; global.facing="R" }
    if (holdd &amp;&amp; holdl &amp;&amp; sprite_index!=s_run_face &amp;&amp; sprite_index!=s_run_left) { sprite_index=s_run_left; global.facing="L" }
    else if (holdd &amp;&amp; holdr &amp;&amp; sprite_index!=s_run_face &amp;&amp; sprite_index!=s_run_right) { sprite_index=s_run_right; global.facing="R" }
    else if (holdu &amp;&amp; holdl &amp;&amp; sprite_index!=s_run_back &amp;&amp; sprite_index!=s_run_left) { sprite_index=s_run_left; global.facing="L" }
    else if (holdu &amp;&amp; holdr &amp;&amp; sprite_index!=s_run_back &amp;&amp; sprite_index!=s_run_right) { sprite_index=s_run_right; global.facing="R" }
    }
} else { moving=0 }

if (moving) {
    if ((holdd || holdu) &amp;&amp; (holdl || holdr)) { movestep+=(movespeed/sqrt(2)) }
    else { movestep+=movespeed }
    while (movestep&gt;=1) {
        movestep-=1
        fholdd=0; fholdu=0; fholdl=0; fholdr=0;
        for (cc=6; cc&gt;0; cc-=1) {
        if holdu {
            if !place_free(x,y-1) {
                if place_free(x-cc,y-1) &amp;&amp; !(holdr || fholdr) { fholdl=1 }
                else if place_free(x+cc,y-1) &amp;&amp; !(holdl || fholdl) { fholdr=1 }
            }
        } else if holdd {
            if !place_free(x,y+1) {
                if place_free(x-cc,y+1) &amp;&amp; !(holdr || fholdr) { fholdl=1 }
                else if place_free(x+cc,y+1) &amp;&amp; !(holdl || fholdl) { fholdr=1 }
            }
        }
        if holdl {
            if !place_free(x-1,y) {
                if place_free(x-1,y-cc) &amp;&amp; !(holdd || fholdd) { fholdu=1 }
                else if place_free(x-1,y+cc) &amp;&amp; !(holdu || fholdu) { fholdd=1 }
            }
        } else if holdr {
            if !place_free(x+1,y) {
                if place_free(x+1,y-cc) &amp;&amp; !(holdd || fholdd) { fholdu=1 }
                else if place_free(x+1,y+cc) &amp;&amp; !(holdu || fholdu) { fholdd=1 }
            }
        }
        }
        xstep=(holdr || fholdr)-(holdl || fholdl)
        ystep=(holdd || fholdd)-(holdu || fholdu)
        if (place_free(x+xstep,y)) { x+=xstep }
        if (place_free(x,y+ystep)) { y+=ystep }
    }
} else {
    switch (sprite_index) {
        case s_walk_face: sprite_index=s_stand_face; break;
        case s_walk_back: sprite_index=s_stand_back; break;
        case s_walk_left: sprite_index=s_stand_left; break;
        case s_walk_right: sprite_index=s_stand_right; break;
        case s_run_face: sprite_index=s_idle_face; break;
        case s_run_back: sprite_index=s_idle_back; break;
        case s_run_left: sprite_index=s_idle_left; break;
        case s_run_right: sprite_index=s_idle_right; break;
    }
    movestep=0
}

switch(sprite_index)
{
case s_walk_face: image_speed=0.5; break;
case s_walk_left: image_speed=0.5; break;
case s_walk_back: image_speed=0.5; break;
case s_walk_right: image_speed=0.5; break;
case s_run_face: image_speed=0.5; break;
case s_run_left: image_speed=0.5; break;
case s_run_back: image_speed=0.5; break;
case s_run_right: image_speed=0.5; break;
case s_stand_face: image_speed=0.1; break;
case s_stand_left: image_speed=0.1; break;
case s_stand_back: image_speed=0.1; break;
case s_stand_right: image_speed=0.1; break;
case s_idle_face: image_speed=0.1; break;
case s_idle_left: image_speed=0.1; break;
case s_idle_back: image_speed=0.1; break;
case s_idle_right: image_speed=0.1; break;
}

if action
{
movespeed=12
}
else movespeed=6

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
