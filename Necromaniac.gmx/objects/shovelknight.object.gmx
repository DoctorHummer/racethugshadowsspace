<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>shovel_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>playerpar</parentName>
  <maskName>sk_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = 1;               // Player direction. 1 = right, -1 = left.
xspeed = 0.0;          // Horizontal speed.
yspeed = 0.0;          // Vertical speed.
xmaxspeed = 15.0;       // Horizontal speed limit.
ymaxspeed = 13.0;      // Vertical speed limit.

weight = 1.2;          // How fast the player falls.
accel = 0.5;           // How fast the player accelerates horizontally.
xfriction = 0.5;       // How fast the player decelerates horizontally.
jumpHeight = 24.5;      // How high the player jumps.

maxDoubleJumps = 0;    // Number of possible additional jumps. 
availableJumps = 0;    // Number of available additional jumps.
canDoubleJump = false; // Whether or not player can do an additional jump.
canWalljump = true;    // Whether or not player can walljump.

isClimbing = false;    // Whether or not player is climbing.
isJumping = false;     // Whether or not player is jumping.
isDismounting = false; // Whether or not player is dismounting a ladder.
isWallsliding = false; // Whether or not player is sliding down a wall.

aiming_max = 60;       // Max number of aiming frames.
dismount_max = 20;     // Max number of ladder dismounting frames.
landing_max = 3;      // Max number of landing frames.

aiming = 0;            // Remaining number of aiming frames.
dismount = 0;          // Remaining number of ladder dismounting frames.
landing = 0;           // Remaining number of landing frames.
firing = 0;            // Remaining number of firing frames.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack=0;
attacktimer=0;
bessmertie=0
hitted=0
gethit=0;
t = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
bessmertie=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Logic

// VELOCITY HANDLING ==================================================

// Clamp velocities.
xspeed = iff(abs(xspeed) &gt; xmaxspeed, xmaxspeed * sign(xspeed), xspeed);
yspeed = iff(abs(yspeed) &gt; ymaxspeed, ymaxspeed * sign(yspeed), yspeed);

// Vertical velocity:
if (place_free(x, y + yspeed)) {
  y += yspeed;
}
else {
  // Landing.
  if (yspeed &gt; 0) {
    isClimbing = false;
    isJumping = false;
    isDismounting = false;
    landing = landing_max;
    dismount = dismount_max;
    y = floor(y);
  }
  move_contact_solid(point_direction(x, y, x, y + yspeed), yspeed);
  yspeed = 0;
}

// Horizontal velocity:
if (place_free(x + xspeed, y)) {
    x += xspeed;
} 
else {
  move_contact_solid(point_direction(x, y, x + xspeed, y), xspeed);
  xspeed = 0;
}

// Limit position within room.
if (x &lt; 0) x = 0;
if (x &gt; room_width) x = room_width;

// PLAYER MOVEMENT ==================================================

isWallsliding = false;

if (isClimbing == false) {
  // Handle directions.
  if hitted=0
  {
  if (keyboard_check_pressed(global.controlleft) || (keyboard_check(global.controlleft) &amp;&amp; keyboard_check_released(global.controlright))) {
    dir = -1;
  }
  if (keyboard_check_pressed(global.controlright) || (keyboard_check(global.controlright) &amp;&amp; keyboard_check_released(global.controlleft))) {
    dir = 1; 
  }
  }
  
  // Jumping from air:
  if (!place_meeting(x, y+1, cube)) {
    yspeed += weight;
    if (!keyboard_check(global.controljump)) {
      canDoubleJump = true;
    }
    // Double jump.
    else if (availableJumps &gt; 0 &amp;&amp; keyboard_check_pressed(global.controljump) &amp;&amp; canDoubleJump == true) {
      availableJumps -= 1;
      yspeed = -jumpHeight;
      xspeed = xmaxspeed * (0 - keyboard_check(global.controlleft) + keyboard_check(global.controlright));
      isJumping = true;
    }
    // Jump cancel.
    if (!keyboard_check(global.controljump) &amp;&amp; isJumping &amp;&amp; (yspeed &lt; -jumpHeight / 2)) {
      yspeed = -jumpHeight / 2;
    }
  }
  // Jumping from ground.
  else {
    availableJumps = maxDoubleJumps;
    canDoubleJump = false;
    if (keyboard_check_pressed(global.controljump)) {
  if (!audio_is_playing(jump)){audio_play_sound(jump,0.5,false)}
      yspeed = -jumpHeight;
      xspeed = xmaxspeed * (0 - keyboard_check(global.controlleft) + keyboard_check(global.controlright));
      isJumping = true;
    }
  }

  // Horizontal acceleration.
  if (keyboard_check(global.controlleft) &amp;&amp; xspeed &gt; -xmaxspeed &amp;&amp; dir == -1) {
    xspeed -= accel;
  }
  if (keyboard_check(global.controlright) &amp;&amp; xspeed &lt; xmaxspeed &amp;&amp; dir == 1) {
    xspeed += accel;
  }
  
  // Horizontal friction.
  if (!keyboard_check(global.controlleft) &amp;&amp; !keyboard_check(global.controlright)) {
    if (abs(xspeed) &gt; xfriction) {
      xspeed -= sign(xspeed) * xfriction;
    } else {
      xspeed = 0;
    }
  }
  
  
  // Climbing on to ladder.
  if (place_meeting(x, y, o_ladder) &amp;&amp; !isDismounting &amp;&amp; attack!=2) {
    if (keyboard_check(global.controlup) &amp;&amp; place_meeting(x, y-8, o_ladder)) {
      isClimbing = true;
    }
    if (keyboard_check(global.controldown) &amp;&amp; place_meeting(x, y+8, o_ladder) &amp;&amp; !place_meeting(x, y+1, cube)) {
      isClimbing = true;
    }
  }
}
// Movement on ladder:
else {
  // Stop climbing.
  if (!place_meeting(x, y, o_ladder)) {
    isClimbing = false;
  }
  
  // Handle direction.
  if (keyboard_check_pressed(global.controlleft)) {
    dir = -1;
  } 
  if keyboard_check_pressed(global.controlright) {
    dir = 1;
  }
  
  
  xspeed = 0;
  yspeed = 0;
  
  if (firing == 0) {
    // Go down the ladder.
    if (place_meeting(x, y+8, o_ladder) &amp;&amp; keyboard_check(global.controldown)) {
      if attack=0 {yspeed = 2.5;} else {yspeed = -0.1;}
      if (place_meeting(x, y+1, cube)) {
        is_climbing = false;
      }
    }
    // Go up the ladder.
    if (place_meeting(x, y-8, o_ladder) &amp;&amp; keyboard_check(global.controlup)) {
      if attack=0 {yspeed = -2.5;} else {yspeed = -0.1;}
    }
  }
  
  // Dismounting.
  if (keyboard_check_pressed(global.controljump) || dismount &lt;= 0) {
    isClimbing = false;
    isDismounting = true;
    if (dismount &lt;= 0) {
      xspeed = (xmaxspeed / 2) * dir;
    }
      yspeed = -12;
  if (!audio_is_playing(jump)){audio_play_sound(jump,0.5,false)}
  }
}
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attack
if attacktimer=0
{
attack=0; 
}

if attack=0
{
///Image Handling

// Draw the appropriate sprites:
if (place_meeting(x, y+1, cube)) {
  if (xspeed == 0) {
    // Idle.
    sprite_index = shovel_idle;
  }
  else {
    // Running.
    if (sign(xspeed) == sign(dir)) {
      sprite_index = iff(aiming, shovel_run, shovel_run);
    }
    // Skidding.
    else {
      sprite_index = iff(aiming, shovel_skid, shovel_skid);
    }
  }
}
else {
  // Jumping.
  sprite_index = iff(aiming, shovel_jump, shovel_jump);
  image_index = 1 + sign(yspeed);
  if (abs(yspeed) &lt; 2) {
    image_index = 1;
  }
}
// Landing.
if (landing &gt; 0) {
  landing -= 1;
  sprite_index = iff(aiming, shovel_land, shovel_land);
  if (!audio_is_playing(jumpstop)){audio_play_sound(jumpstop,0.5,false)}
}

if (isClimbing) {
    sprite_index = shovelclimb;
    if (dismount &lt; dismount_max &amp;&amp; yspeed == 0) {
      sprite_index = shovelclimb;
    }
    if (!place_meeting(x, y-8, o_ladder)) {
      sprite_index = shovelclimbtop;
    }
  image_index = floor(y/16); 
}
// Configure image speeds.
image_speed = 0.4;

if (sprite_index == shovel_run) {
  image_speed = 0.6;
}

// Handle image direction.
image_xscale = dir;

if (keyboard_check_pressed(global.controlattack))
{
image_index=0
attacktimer=10
attack=1
audio_play_sound(shovelattack,0.5,false);
}

if (keyboard_check(global.controldown) and isJumping = true and isClimbing = false &amp;&amp; !isDismounting &amp;&amp; !place_meeting(x, y, ladder))
{
attack=2
image_index=0
attacktimer=10
}

}

if attack=1
{
if isClimbing=false
{
sprite_index=shovel_attack; image_speed = 0.5;
}
if isClimbing=true
{
sprite_index=shovelclimbattack; image_speed = 0.5;
}
if attacktimer=5 {if dir=1 {instance_create(shovelknight.x+24,shovelknight.y,attackhitbox)} else {instance_create(shovelknight.x-24,shovelknight.y,attackhitbox)}}
attacktimer--
}

if attack=2
{
if (isClimbing = false &amp;&amp; !isDismounting &amp;&amp; !place_meeting(x, y, ladder))
{
sprite_index=shovel_downattack; image_speed = 0;
if (place_meeting(shovelknight.x, shovelknight.y+1, cube)) {attack=0; attacktimer=0;}
}
}


if (attack=1 and isJumping = true){xmaxspeed = 7.5}
if (attack=1 and isJumping = false){xmaxspeed = 0.3}
if (attack=0 || attack=2){xmaxspeed = 7.5}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hitted&gt;0 {sprite_index=shovel_hit if (place_meeting(shovelknight.x, shovelknight.y+1, cube)){hitted=0}}
if (place_meeting(shovelknight.x, shovelknight.y+1, cube) and global.hp&lt;=0){a=instance_create(x,y,shovelgetrekt); instance_destroy()}

if bessmertie=1
{


if t &lt; 40
{

if (t&lt;=2 || t&gt;4 &amp;&amp; t&lt;=6 || t&gt;8 &amp;&amp; t&lt;=10 || t&gt;12 &amp;&amp; t&lt;=14 || t&gt;16 &amp;&amp; t&lt;=18 || t&gt;20 &amp;&amp; t&lt;=22 || t&gt;24 &amp;&amp; t&lt;=26 || t&gt;28 &amp;&amp; t&lt;=30 || t&gt;32 )
{image_alpha=0.1}
if (t&gt;2 &amp;&amp; t&lt;=4 || t&gt;6 &amp;&amp; t&lt;=8 || t&gt;10 &amp;&amp; t&lt;=12 || t&gt;14 &amp;&amp; t&lt;=16 || t&gt;18 &amp;&amp; t&lt;=20 || t&gt;22 &amp;&amp; t&lt;=24|| t&gt;26 &amp;&amp; t&lt;=28 || t&gt;30 &amp;&amp; t&lt;=32 )
{image_alpha=1}
t+=1; //counts down to when the guy stops flashing, ignoring the clumsy "alarm" feature
}
}

if bessmertie=0
{
image_alpha = 1; t=0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemiehitbox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if bessmertie=0
{
global.hp-=2
ini_open('savegame.ss');
var t = ini_read_real('stats','hp', 0);
ini_write_real('stats','hp', t - 2);
ini_close();
hitted=15
if x&lt;other.x {xspeed-=10}
if x&gt;=other.x {xspeed+=10}
yspeed-=10
alarm[0]=40;
bessmertie=1;
if (!audio_is_playing(hit)){audio_play_sound(hit,0.5,false)}
}

  if (isClimbing = true) {
    isClimbing = false;
    isDismounting = true;
    if (dismount &lt;= 0) {
      xspeed = (xmaxspeed / 2) * dir;
    }
      yspeed = -12;
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parmonster">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (attack=2)
{
if (y&lt;other.y)
{
instance_create(x,y+16,downeffect)
yspeed-=24
other.hp-=1
}
else
{
if bessmertie=0
{
global.hp-=1
ini_open('savegame.ss');
var t = ini_read_real('stats','hp', 0);
ini_write_real('stats','hp', t - 1);
ini_close();
hitted=1
if x&lt;other.x {xspeed-=10}
if x&gt;=other.x {xspeed+=10}
yspeed-=10
alarm[0]=40;
bessmertie=1;  
if (!audio_is_playing(hit)){audio_play_sound(hit,0.5,false)}
}
}
}
else
{
if bessmertie=0
{
global.hp-=1
ini_open('savegame.ss');
var t = ini_read_real('stats','hp', 0);
ini_write_real('stats','hp', t - 1);
ini_close();
hitted=15
if x&lt;other.x {xspeed-=10}
if x&gt;=other.x {xspeed+=10}
yspeed-=10
alarm[0]=40;
bessmertie=1;
if (!audio_is_playing(hit)){audio_play_sound(hit,0.5,false)}
}
}


  if (isClimbing = true) {
    isClimbing = false;
    isDismounting = true;
    if (dismount &lt;= 0) {
      xspeed = (xmaxspeed / 2) * dir;
    }
      yspeed = -12;
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if gethit=0
{
draw_self();
}
if gethit&gt;0
{
d3d_set_fog(true, c_white, 0, 0);
draw_self();
d3d_set_fog(false, c_white, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
